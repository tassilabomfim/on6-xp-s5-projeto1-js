console.log('-----------------------------------------------------')
console.log('Ol√°, mundo!', 'Revis√£o de JavaScript e Introdu√ß√£o a ES6!')
console.log('-----------------------------------------------------')

// ----------------------------------------------
console.log('Fun√ß√µes')

// FUN√á√ïES
// Possu√≠mos as fun√ß√µes: falar, dobro, calcularMedia
// function falar() {
//   return 'Pipipi popopo'
// }

// function dobro(num) {
//   return num * 2
// }

// function calcularMedia(nota1, nota2, nota3) {
//   const soma = (nota1 + nota2 + nota3)
//   const media = soma / 3
//   return media
// }

// Vamos refatorar essas fun√ß√µes para a sintaxe de Arrow function

const falar = () => 'Pipipi popopo'

const dobro = num => num * 2

const calcularMedia = (nota1, nota2, nota3) =>  { 
  const soma = (nota1 + nota2 + nota3)
  const media = soma / 3
  return media
}



console.log('-----------------------------------------------------')
// ----------------------------------------------
console.log('Callback')

// CALLBACK
// Possu√≠mos as fun√ß√µes: somar, subtrair, multiplicar e dividir.
// function somar(a, b) {
//   return a + b
// }

// function subtrair(a, b) {
//   return a - b
// }

// function multiplicar(a, b) {
//   return a * b
// }

// function dividir(a, b) {
//   return a / b
// }

// function ordenar(a, b) {
//   if (a <= b) {
//     return [a, b]
//   } else {
//     return [b, a]
//   }
// }

const somar = (a, b) => a + b

const subtrair = (a, b) => a - b

const multiplicar = (a, b) => a * b

const dividir = (a, b) => a / b

const ordenar = (a, b) => (a <= b) ? [a, b] : [b, a]

// Crie uma fun√ß√£o chamada calcular que receber√° como par√¢metro: dois n√∫meros e uma fun√ß√£o de callback

const calcular = (n1, n2, callback) => callback(n1, n2)


// Fa√ßa a soma de dois n√∫meros usando a fun√ß√£o calcular

const resultadoSoma = calcular(3, 5, somar)

console.log(`A soma de 3 com 5 √© ${resultadoSoma}`)



// Fa√ßa a subtra√ß√£o de dois n√∫meros usando a fun√ß√£o calcular


const resultadoSubtrair = calcular(10, 5, subtrair)

console.log(`A subtra√ß√£o de 10 e 5 √© ${resultadoSubtrair}`)


// Fa√ßa a multiplica√ß√£o de dois n√∫meros usando a fun√ß√£o calcular

const resultadoMultiplicar = calcular(2, 6, multiplicar)

console.log(`A multiplica√ß√£o de 2 e 6 √© ${resultadoMultiplicar}`);

// Fa√ßa a divis√£o de dois n√∫meros usando a fun√ß√£o calcular

const resultadoDivisao =  calcular(100, 5, dividir)

console.log (`O resultado da divis√£o entre 100 e 5 √© ${resultadoDivisao}`)

// Fa√ßa a ordena√ß√£o crescente de dois n√∫meros usando a fun√ß√£o calcular

const ordenaPraGente = calcular(11, 7, ordenar)

console.log(`Colocamos em ordem os n√∫meros 11 e 7: ${ordenaPraGente}`)


// Volte nas fun√ß√µes e refatore-as na sintaxe ES6

const falei = falar()
console.log(`    Falei: ${falei}`) //ou console.log(falei) ou console.log(falar())

console.log('-----------------------------------------------------')
// ----------------------------------------------
console.log('Condicionais')

// CONDICIONAIS
// Uma estudante obteve as seguinte notas: n1, n2 e n3
const n1 = 9
const n2 = 5
const n3 = 1

// Verifique se a estudante foi aprovada. Se a m√©dia das notas for maior ou igual a 7, a estudante passou!

const media = calcularMedia(n1, n2, n3)

const resultado = (media >= 7) ? 'aprovado' : 'reprovado'

// (condic√£o) ? true : false ...  √© o mesmo que: if (media >= 7) {
//   return 'aprovado'
// } else {
//   return 'reprovado'
// }

//codi√ß√£o ? true : false

console.log(`A estudante foi ${resultado} !`)

console.log('-----------------------------------------------------')
// ----------------------------------------------
// OBJETOS
console.log('Objetos  ü™ë')

// Declara√ß√£o de objetos
const objeto = new Object()
objeto.nome = 'cadeira'
objeto.tipo = 'madeira'
objeto.peso = 7

const pokemon = {
  name: 'Pikachu',
  type: 'el√©trico',
  height: 40.6,
}

// Fazer destructuring e acessar os valores de objeto e pokemon

// antes chamava o objeto assim: const nome = objeto.nome
// console.log(nome)

const { nome, tipo, peso } = objeto
console.log(`O objeto ${nome} √© feito de ${tipo} e pesa ${peso} kg.`)


const { name, type, height } = pokemon
console.log(`Capturei o pokemon ${name} que tem tipo ${type} tem altura de ${height} cm.`);

console.log('-----------------------------------------------------')
// ----------------------------------------------
// DATAS
console.log('Datas üóì')

// Outro exemplo de um objeto JavaScript √© o Date.

// Vamos criar a vari√°vel chamada hoje que ir√° receber a data de hoje.

const hoje = new Date()
console.log (hoje) //para capturar a data de hoje(ou dia acessado pelo usuario)

// Vamos capturar os valores de dia, mes e ano da data de hoje pelos m√©todos de Date

const dia = hoje.getDate()
const mes = hoje.getMonth()
const ano = hoje.getFullYear()

console.log(dia, mes, ano);


// Vamos criar uma data espec√≠fica. Lembrando que m√™s de Janeiro √© 0 no Javascript ü§∑üèª‚Äç‚ôÄÔ∏è

const nascimento = new Date(1990, 8, 3)
console.log(`nasci em ${nascimento}`)

// Podemos usar o m√©todo toLocaleString para formatar a data

const dataFormatada = hoje.toLocaleDateString('pt-BR') //teria que passar 03/09/2020
console.log(dataFormatada) 


// Temos mais op√ß√µes para formatar a data
const options = { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' }

const dataLonga = hoje.toLocaleDateString('pt-BR', options)
console.log(dataLonga) //era pra retornar Segunda, 3 de setembro de 1990

console.log('-----------------------------------------------------')
// ----------------------------------------------

const pessoa = {
  nome: 'Yasminn',
  sobrenome: 'Vaz',
  idade: 25,
  altura: 1.62,
  peso: 55,
  andando: false,
  caminhouQuantosMetros: 0,
  fazerAniversario: () => pessoa.idade++,
  andar: (metrosCaminhados) => {
    pessoa.andando = true
    pessoa.caminhouQuantosMetros += metrosCaminhados
  },
  parar: () => pessoa.andando = false,
  apresentacao: () => {
    const anos = (pessoa.idade === 1) ? 'ano' : 'anos'
  
    const metros = (pessoa.caminhouQuantosMetros <= 1) ? 'metro' : 'metros'
  
    return `Ol√°, eu sou ${pessoa.nome} ${pessoa.sobrenome}, tenho ${pessoa.idade} ${anos}, ${pessoa.altura}, meu peso √© ${pessoa.peso} e, s√≥ hoje, eu j√° caminhei ${pessoa.caminhouQuantosMetros} ${metros}!`
  }
}

pessoa.andar(1)

console.log(pessoa.apresentacao())



// Vamos utilizar o formato ES6 para refatorar a constante pessoa.

// Quero criar as vari√°veis pessoa2 e pessoa3 com as mesmas propriedades, mas alterando os valores de nome, sobrenome, altura e peso


const pessoa2 = {
  nome: 'Tassila',
  sobrenome: 'Bomfim',
  idade: 30,
  altura: 1.60,
  peso: 80,
  andando: false,
  caminhouQuantosMetros: 0,
  fazerAniversario: () => pessoa2.idade++,
  andar: (metrosCaminhados) => {
    pessoa2.andando = true
    pessoa2.caminhouQuantosMetros += metrosCaminhados
  },
  parar: () => pessoa2.andando = false,
  apresentacao: () => {
    const anos = (pessoa2.idade === 1) ? 'ano' : 'anos'
  
    const metros = (pessoa2.caminhouQuantosMetros <= 1) ? 'metro' : 'metros'
  
    return `Ol√°, eu sou ${pessoa2.nome} ${pessoa2.sobrenome}, tenho ${pessoa2.idade} ${anos}, ${pessoa2.altura}, meu peso √© ${pessoa2.peso} e, s√≥ hoje, eu j√° caminhei ${pessoa2.caminhouQuantosMetros} ${metros}!`
  }
}

pessoa2.andar(200)

console.log(pessoa2.apresentacao())




console.log('-----------------------------------------------------')
// ----------------------------------------------
// CLASSES
console.log('Classes üÜï')

// Vamos criar a classe Pessoa

class Pessoa {
  constructor(){
    this
  }
}





console.log('-----------------------------------------------------')
// ----------------------------------------------
// ARRAYS
console.log('Arrays [ 0Ô∏è‚É£  , 1Ô∏è‚É£  , 2Ô∏è‚É£  ]')

// Declara√ß√£o de arrays
const lista = new Array('pera', 'uva', 'ma√ß√£')

const numbers = [9, 2, 5]

// Acessando elementos pela posi√ß√£o do array







// Informe o tamanho de cada array







// Fa√ßa a desestrutura√ß√£o do array







// Possuo 4 tias. Os dados delas est√£o armazenados no array de objetos dentro do arquivo db.js
// Vamos importar esses dados para podermos us√°-los durante nosso exerc√≠cio de revis√£o.
const db = require('./db')






console.log('-----------------------------------------------------')
// ----------------------------------------------
// M√âTODOS DE ITERA√á√ÉO
console.log('M√©todos itera√ß√£o ')

// Mostre a tabela das tias pelo console.table()







console.log('-----------------------------------------------------')
console.log('filter()')
// filter
// Filtre as tias que moram em SP e mostre no console.







console.log('-----------------------------------------------------')
console.log('map()')
// map
// Crie um novo array chamado tiasMaisChegadas e adicione uma propriedade chamada cuidouDeMim que recebe um valor booleano. Caso a tia teve at√© 2 filhos, isso significa que ela cuidou de mim e seu valor √© true. Caso ela teve mais que 2 filhos, o valor da propriedade cuidouDeMim √© false.







console.log('-----------------------------------------------------')
console.log('sort()')
// SORT

// Vamos praticar o m√©todo sort() com o array numbers
// const numbers = [9, 2, 5]

const comparar = (a, b) => {
  if (a < b) { // primeiro vem b e depois vem a
    return -1
  } else if (a > b) { // mantenho a como primeiro e b vem depois
    return 1
  } else { // se a e b forem iguais, mant√©m a mesma ordem
    return 0
  }
}

// Refatore a fun√ß√£o comparar e ordene numbers em ordem crescente







// Ordene as tias por ordem decrescente de idade (a mais velha primeiro)








console.log('-----------------------------------------------------')
console.log('reduce()')
// reduce

// Fa√ßa a soma do array numbers







// Some a quantidade de netos que vov√≥ possui.







// ----------------------------------------------
console.log('-----------------------------------------------------')
console.log('                         Fim                         ')
console.log('-----------------------------------------------------')